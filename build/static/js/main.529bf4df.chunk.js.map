{"version":3,"sources":["pages/Main.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","None","FloatViewPort","span","Main","state","time","moment","format","isDisplaying","handleToggleVisible","setState","setInterval","result","this","Button","variant","onClick","size","Component","ClientRouter","exact","path","component","App","Router","Boolean","window","location","hostname","match","dotenv","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kiCAMA,IAAMA,EAAUC,IAAOC,IAAV,KAiBPC,EAAOF,IAAOC,IAAV,KAOJE,EAAgBH,IAAOI,KAAV,KA8CJC,E,2MArCbC,MAAQ,CACNC,KAAMC,MAASC,OAAO,OACtBC,cAAc,G,EAShBC,oBAAsB,WACpB,EAAKC,SAAS,CAAEF,cAAe,EAAKJ,MAAMI,gB,mFAPvB,IAAD,OAClBG,aAAY,WACV,EAAKD,SAAS,CAAEL,KAAMC,MAASC,OAAO,WACrC,O,+BAQH,IAAMK,EAASC,KAAKT,MAAMI,aACxB,kBAACX,EAAD,KAAUgB,KAAKT,MAAMC,MAErB,kBAACL,EAAD,MAEF,OACE,oCACGY,EACD,kBAACX,EAAD,KACE,kBAACa,EAAA,EAAD,CACEC,QAAS,YACTC,QAASH,KAAKJ,oBACdQ,KAAM,MACLJ,KAAKT,MAAMI,aAAe,MAAQ,Y,GA9B5BU,aCvBJC,EATb,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,OCA1BoB,EAJO,WACpB,OAAOC,G,iBCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAOC,SAEPC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.529bf4df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  color: white;\n  font-size: 200px;\n  font-weight: 100;\n  @media screen and (max-width: 1200px) {\n    font-size: 150px;\n  }\n  @media screen and (max-width: 800px) {\n    font-size: 100px;\n  }\n`;\n\nconst None = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: black;\n  color: black;\n`;\n\nconst FloatViewPort = styled.span`\n  position: absolute;\n  bottom: 30px;\n  display: flex;\n  justify-content: center;\n  width: 100vw;\n`;\n\nclass Main extends Component {\n  state = {\n    time: moment().format('LTS'),\n    isDisplaying: true,\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({ time: moment().format('LTS') });\n    }, 100);\n  }\n\n  handleToggleVisible = () => {\n    this.setState({ isDisplaying: !this.state.isDisplaying });\n  };\n\n  render() {\n    const result = this.state.isDisplaying ? (\n      <Wrapper>{this.state.time}</Wrapper>\n    ) : (\n      <None />\n    );\n    return (\n      <>\n        {result}\n        <FloatViewPort>\n          <Button\n            variant={'secondary'}\n            onClick={this.handleToggleVisible}\n            size={'lg'}>\n            {this.state.isDisplaying ? 'OFF' : 'ON'}\n          </Button>\n        </FloatViewPort>\n      </>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Main from './pages/Main';\n\nconst ClientRouter = (\n  <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Main} />\n      </Switch>\n    </Router>\n  </>\n);\n\nexport default ClientRouter;\n","import React from 'react';\nimport './styles/index.scss';\n\nimport Router from './Router';\n\nconst App: React.FC = () => {\n  return Router;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport dotenv from 'dotenv';\nimport * as serviceWorker from './serviceWorker';\ndotenv.config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}